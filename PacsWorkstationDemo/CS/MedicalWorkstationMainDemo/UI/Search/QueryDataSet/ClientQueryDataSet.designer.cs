//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4206
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Leadtools.Demos.Workstation {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ClientQueryDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ClientQueryDataSet : global::System.Data.DataSet {
        
        private StudiesDataTable tableStudies;
        
        private SeriesDataTable tableSeries;
        
        private ImagesDataTable tableImages;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ClientQueryDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ClientQueryDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Studies"] != null)) {
                    base.Tables.Add(new StudiesDataTable(ds.Tables["Studies"]));
                }
                if ((ds.Tables["Series"] != null)) {
                    base.Tables.Add(new SeriesDataTable(ds.Tables["Series"]));
                }
                if ((ds.Tables["Images"] != null)) {
                    base.Tables.Add(new ImagesDataTable(ds.Tables["Images"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StudiesDataTable Studies {
            get {
                return this.tableStudies;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SeriesDataTable Series {
            get {
                return this.tableSeries;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ImagesDataTable Images {
            get {
                return this.tableImages;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ClientQueryDataSet cln = ((ClientQueryDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Studies"] != null)) {
                    base.Tables.Add(new StudiesDataTable(ds.Tables["Studies"]));
                }
                if ((ds.Tables["Series"] != null)) {
                    base.Tables.Add(new SeriesDataTable(ds.Tables["Series"]));
                }
                if ((ds.Tables["Images"] != null)) {
                    base.Tables.Add(new ImagesDataTable(ds.Tables["Images"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableStudies = ((StudiesDataTable)(base.Tables["Studies"]));
            if ((initTable == true)) {
                if ((this.tableStudies != null)) {
                    this.tableStudies.InitVars();
                }
            }
            this.tableSeries = ((SeriesDataTable)(base.Tables["Series"]));
            if ((initTable == true)) {
                if ((this.tableSeries != null)) {
                    this.tableSeries.InitVars();
                }
            }
            this.tableImages = ((ImagesDataTable)(base.Tables["Images"]));
            if ((initTable == true)) {
                if ((this.tableImages != null)) {
                    this.tableImages.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ClientQueryDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ClientQueryDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableStudies = new StudiesDataTable();
            base.Tables.Add(this.tableStudies);
            this.tableSeries = new SeriesDataTable();
            base.Tables.Add(this.tableSeries);
            this.tableImages = new ImagesDataTable();
            base.Tables.Add(this.tableImages);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStudies() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSeries() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeImages() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ClientQueryDataSet ds = new ClientQueryDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void StudiesRowChangeEventHandler(object sender, StudiesRowChangeEvent e);
        
        public delegate void SeriesRowChangeEventHandler(object sender, SeriesRowChangeEvent e);
        
        public delegate void ImagesRowChangeEventHandler(object sender, ImagesRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StudiesDataTable : global::System.Data.TypedTableBase<StudiesRow> {
            
            private global::System.Data.DataColumn columnPatientID;
            
            private global::System.Data.DataColumn columnPatientName;
            
            private global::System.Data.DataColumn columnPatientBirthDate;
            
            private global::System.Data.DataColumn columnPatientSex;
            
            private global::System.Data.DataColumn columnStudyDescription;
            
            private global::System.Data.DataColumn columnStudyDate;
            
            private global::System.Data.DataColumn columnAccessionNumber;
            
            private global::System.Data.DataColumn columnReferDrName;
            
            private global::System.Data.DataColumn columnStudyInstanceUID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudiesDataTable() {
                this.TableName = "Studies";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StudiesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StudiesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PatientIDColumn {
                get {
                    return this.columnPatientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PatientNameColumn {
                get {
                    return this.columnPatientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PatientBirthDateColumn {
                get {
                    return this.columnPatientBirthDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PatientSexColumn {
                get {
                    return this.columnPatientSex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudyDescriptionColumn {
                get {
                    return this.columnStudyDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudyDateColumn {
                get {
                    return this.columnStudyDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccessionNumberColumn {
                get {
                    return this.columnAccessionNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReferDrNameColumn {
                get {
                    return this.columnReferDrName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudyInstanceUIDColumn {
                get {
                    return this.columnStudyInstanceUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudiesRow this[int index] {
                get {
                    return ((StudiesRow)(this.Rows[index]));
                }
            }
            
            public event StudiesRowChangeEventHandler StudiesRowChanging;
            
            public event StudiesRowChangeEventHandler StudiesRowChanged;
            
            public event StudiesRowChangeEventHandler StudiesRowDeleting;
            
            public event StudiesRowChangeEventHandler StudiesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStudiesRow(StudiesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudiesRow AddStudiesRow(string PatientID, string PatientName, string PatientBirthDate, string PatientSex, string StudyDescription, string StudyDate, string AccessionNumber, string ReferDrName, string StudyInstanceUID) {
                StudiesRow rowStudiesRow = ((StudiesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PatientID,
                        PatientName,
                        PatientBirthDate,
                        PatientSex,
                        StudyDescription,
                        StudyDate,
                        AccessionNumber,
                        ReferDrName,
                        StudyInstanceUID};
                rowStudiesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStudiesRow);
                return rowStudiesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudiesRow FindByStudyInstanceUID(string StudyInstanceUID) {
                return ((StudiesRow)(this.Rows.Find(new object[] {
                            StudyInstanceUID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StudiesDataTable cln = ((StudiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StudiesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPatientID = base.Columns["PatientID"];
                this.columnPatientName = base.Columns["PatientName"];
                this.columnPatientBirthDate = base.Columns["PatientBirthDate"];
                this.columnPatientSex = base.Columns["PatientSex"];
                this.columnStudyDescription = base.Columns["StudyDescription"];
                this.columnStudyDate = base.Columns["StudyDate"];
                this.columnAccessionNumber = base.Columns["AccessionNumber"];
                this.columnReferDrName = base.Columns["ReferDrName"];
                this.columnStudyInstanceUID = base.Columns["StudyInstanceUID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPatientID = new global::System.Data.DataColumn("PatientID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPatientID);
                this.columnPatientName = new global::System.Data.DataColumn("PatientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPatientName);
                this.columnPatientBirthDate = new global::System.Data.DataColumn("PatientBirthDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPatientBirthDate);
                this.columnPatientSex = new global::System.Data.DataColumn("PatientSex", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPatientSex);
                this.columnStudyDescription = new global::System.Data.DataColumn("StudyDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudyDescription);
                this.columnStudyDate = new global::System.Data.DataColumn("StudyDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudyDate);
                this.columnAccessionNumber = new global::System.Data.DataColumn("AccessionNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccessionNumber);
                this.columnReferDrName = new global::System.Data.DataColumn("ReferDrName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReferDrName);
                this.columnStudyInstanceUID = new global::System.Data.DataColumn("StudyInstanceUID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudyInstanceUID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("StudiesKey1", new global::System.Data.DataColumn[] {
                                this.columnStudyInstanceUID}, true));
                this.columnStudyInstanceUID.AllowDBNull = false;
                this.columnStudyInstanceUID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudiesRow NewStudiesRow() {
                return ((StudiesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StudiesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StudiesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StudiesRowChanged != null)) {
                    this.StudiesRowChanged(this, new StudiesRowChangeEvent(((StudiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StudiesRowChanging != null)) {
                    this.StudiesRowChanging(this, new StudiesRowChangeEvent(((StudiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StudiesRowDeleted != null)) {
                    this.StudiesRowDeleted(this, new StudiesRowChangeEvent(((StudiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StudiesRowDeleting != null)) {
                    this.StudiesRowDeleting(this, new StudiesRowChangeEvent(((StudiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStudiesRow(StudiesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ClientQueryDataSet ds = new ClientQueryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StudiesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SeriesDataTable : global::System.Data.TypedTableBase<SeriesRow> {
            
            private global::System.Data.DataColumn columnSeriesNumber;
            
            private global::System.Data.DataColumn columnSeriesDescription;
            
            private global::System.Data.DataColumn columnModality;
            
            private global::System.Data.DataColumn columnSeriesDate;
            
            private global::System.Data.DataColumn columnSeriesTime;
            
            private global::System.Data.DataColumn columnFrameCount;
            
            private global::System.Data.DataColumn columnStudyInstanceUID;
            
            private global::System.Data.DataColumn columnSeriesInstanceUID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SeriesDataTable() {
                this.TableName = "Series";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SeriesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SeriesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeriesNumberColumn {
                get {
                    return this.columnSeriesNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeriesDescriptionColumn {
                get {
                    return this.columnSeriesDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModalityColumn {
                get {
                    return this.columnModality;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeriesDateColumn {
                get {
                    return this.columnSeriesDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeriesTimeColumn {
                get {
                    return this.columnSeriesTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FrameCountColumn {
                get {
                    return this.columnFrameCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudyInstanceUIDColumn {
                get {
                    return this.columnStudyInstanceUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeriesInstanceUIDColumn {
                get {
                    return this.columnSeriesInstanceUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SeriesRow this[int index] {
                get {
                    return ((SeriesRow)(this.Rows[index]));
                }
            }
            
            public event SeriesRowChangeEventHandler SeriesRowChanging;
            
            public event SeriesRowChangeEventHandler SeriesRowChanged;
            
            public event SeriesRowChangeEventHandler SeriesRowDeleting;
            
            public event SeriesRowChangeEventHandler SeriesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSeriesRow(SeriesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SeriesRow AddSeriesRow(string SeriesNumber, string SeriesDescription, string Modality, string SeriesDate, string SeriesTime, string FrameCount, string StudyInstanceUID, string SeriesInstanceUID) {
                SeriesRow rowSeriesRow = ((SeriesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SeriesNumber,
                        SeriesDescription,
                        Modality,
                        SeriesDate,
                        SeriesTime,
                        FrameCount,
                        StudyInstanceUID,
                        SeriesInstanceUID};
                rowSeriesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSeriesRow);
                return rowSeriesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SeriesRow FindBySeriesInstanceUID(string SeriesInstanceUID) {
                return ((SeriesRow)(this.Rows.Find(new object[] {
                            SeriesInstanceUID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SeriesDataTable cln = ((SeriesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SeriesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSeriesNumber = base.Columns["SeriesNumber"];
                this.columnSeriesDescription = base.Columns["SeriesDescription"];
                this.columnModality = base.Columns["Modality"];
                this.columnSeriesDate = base.Columns["SeriesDate"];
                this.columnSeriesTime = base.Columns["SeriesTime"];
                this.columnFrameCount = base.Columns["FrameCount"];
                this.columnStudyInstanceUID = base.Columns["StudyInstanceUID"];
                this.columnSeriesInstanceUID = base.Columns["SeriesInstanceUID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSeriesNumber = new global::System.Data.DataColumn("SeriesNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeriesNumber);
                this.columnSeriesDescription = new global::System.Data.DataColumn("SeriesDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeriesDescription);
                this.columnModality = new global::System.Data.DataColumn("Modality", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModality);
                this.columnSeriesDate = new global::System.Data.DataColumn("SeriesDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeriesDate);
                this.columnSeriesTime = new global::System.Data.DataColumn("SeriesTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeriesTime);
                this.columnFrameCount = new global::System.Data.DataColumn("FrameCount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrameCount);
                this.columnStudyInstanceUID = new global::System.Data.DataColumn("StudyInstanceUID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudyInstanceUID);
                this.columnSeriesInstanceUID = new global::System.Data.DataColumn("SeriesInstanceUID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeriesInstanceUID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("SeriesKey1", new global::System.Data.DataColumn[] {
                                this.columnSeriesInstanceUID}, true));
                this.columnSeriesInstanceUID.AllowDBNull = false;
                this.columnSeriesInstanceUID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SeriesRow NewSeriesRow() {
                return ((SeriesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SeriesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SeriesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SeriesRowChanged != null)) {
                    this.SeriesRowChanged(this, new SeriesRowChangeEvent(((SeriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SeriesRowChanging != null)) {
                    this.SeriesRowChanging(this, new SeriesRowChangeEvent(((SeriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SeriesRowDeleted != null)) {
                    this.SeriesRowDeleted(this, new SeriesRowChangeEvent(((SeriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SeriesRowDeleting != null)) {
                    this.SeriesRowDeleting(this, new SeriesRowChangeEvent(((SeriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSeriesRow(SeriesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ClientQueryDataSet ds = new ClientQueryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SeriesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ImagesDataTable : global::System.Data.TypedTableBase<ImagesRow> {
            
            private global::System.Data.DataColumn columnSOPInstanceUID;
            
            private global::System.Data.DataColumn columnInstanceNumber;
            
            private global::System.Data.DataColumn columnStudyInstanceUID;
            
            private global::System.Data.DataColumn columnSeriesInstanceUID;
            
            private global::System.Data.DataColumn columnSOPClassUID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagesDataTable() {
                this.TableName = "Images";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ImagesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ImagesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SOPInstanceUIDColumn {
                get {
                    return this.columnSOPInstanceUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstanceNumberColumn {
                get {
                    return this.columnInstanceNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudyInstanceUIDColumn {
                get {
                    return this.columnStudyInstanceUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeriesInstanceUIDColumn {
                get {
                    return this.columnSeriesInstanceUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SOPClassUIDColumn {
                get {
                    return this.columnSOPClassUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagesRow this[int index] {
                get {
                    return ((ImagesRow)(this.Rows[index]));
                }
            }
            
            public event ImagesRowChangeEventHandler ImagesRowChanging;
            
            public event ImagesRowChangeEventHandler ImagesRowChanged;
            
            public event ImagesRowChangeEventHandler ImagesRowDeleting;
            
            public event ImagesRowChangeEventHandler ImagesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddImagesRow(ImagesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagesRow AddImagesRow(string SOPInstanceUID, string InstanceNumber, string StudyInstanceUID, string SeriesInstanceUID, string SOPClassUID) {
                ImagesRow rowImagesRow = ((ImagesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SOPInstanceUID,
                        InstanceNumber,
                        StudyInstanceUID,
                        SeriesInstanceUID,
                        SOPClassUID};
                rowImagesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowImagesRow);
                return rowImagesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagesRow FindBySOPInstanceUID(string SOPInstanceUID) {
                return ((ImagesRow)(this.Rows.Find(new object[] {
                            SOPInstanceUID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ImagesDataTable cln = ((ImagesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ImagesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSOPInstanceUID = base.Columns["SOPInstanceUID"];
                this.columnInstanceNumber = base.Columns["InstanceNumber"];
                this.columnStudyInstanceUID = base.Columns["StudyInstanceUID"];
                this.columnSeriesInstanceUID = base.Columns["SeriesInstanceUID"];
                this.columnSOPClassUID = base.Columns["SOPClassUID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSOPInstanceUID = new global::System.Data.DataColumn("SOPInstanceUID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSOPInstanceUID);
                this.columnInstanceNumber = new global::System.Data.DataColumn("InstanceNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstanceNumber);
                this.columnStudyInstanceUID = new global::System.Data.DataColumn("StudyInstanceUID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudyInstanceUID);
                this.columnSeriesInstanceUID = new global::System.Data.DataColumn("SeriesInstanceUID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeriesInstanceUID);
                this.columnSOPClassUID = new global::System.Data.DataColumn("SOPClassUID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSOPClassUID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ImagesKey", new global::System.Data.DataColumn[] {
                                this.columnSOPInstanceUID}, true));
                this.columnSOPInstanceUID.AllowDBNull = false;
                this.columnSOPInstanceUID.Unique = true;
                this.columnSOPClassUID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagesRow NewImagesRow() {
                return ((ImagesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ImagesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ImagesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ImagesRowChanged != null)) {
                    this.ImagesRowChanged(this, new ImagesRowChangeEvent(((ImagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ImagesRowChanging != null)) {
                    this.ImagesRowChanging(this, new ImagesRowChangeEvent(((ImagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ImagesRowDeleted != null)) {
                    this.ImagesRowDeleted(this, new ImagesRowChangeEvent(((ImagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ImagesRowDeleting != null)) {
                    this.ImagesRowDeleting(this, new ImagesRowChangeEvent(((ImagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveImagesRow(ImagesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ClientQueryDataSet ds = new ClientQueryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ImagesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StudiesRow : global::System.Data.DataRow {
            
            private StudiesDataTable tableStudies;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StudiesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStudies = ((StudiesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PatientID {
                get {
                    try {
                        return ((string)(this[this.tableStudies.PatientIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PatientID\' in table \'Studies\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudies.PatientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PatientName {
                get {
                    try {
                        return ((string)(this[this.tableStudies.PatientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PatientName\' in table \'Studies\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudies.PatientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PatientBirthDate {
                get {
                    try {
                        return ((string)(this[this.tableStudies.PatientBirthDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PatientBirthDate\' in table \'Studies\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudies.PatientBirthDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PatientSex {
                get {
                    try {
                        return ((string)(this[this.tableStudies.PatientSexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PatientSex\' in table \'Studies\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudies.PatientSexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StudyDescription {
                get {
                    try {
                        return ((string)(this[this.tableStudies.StudyDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StudyDescription\' in table \'Studies\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudies.StudyDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StudyDate {
                get {
                    try {
                        return ((string)(this[this.tableStudies.StudyDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StudyDate\' in table \'Studies\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudies.StudyDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccessionNumber {
                get {
                    try {
                        return ((string)(this[this.tableStudies.AccessionNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccessionNumber\' in table \'Studies\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudies.AccessionNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReferDrName {
                get {
                    try {
                        return ((string)(this[this.tableStudies.ReferDrNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReferDrName\' in table \'Studies\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudies.ReferDrNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StudyInstanceUID {
                get {
                    return ((string)(this[this.tableStudies.StudyInstanceUIDColumn]));
                }
                set {
                    this[this.tableStudies.StudyInstanceUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPatientIDNull() {
                return this.IsNull(this.tableStudies.PatientIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPatientIDNull() {
                this[this.tableStudies.PatientIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPatientNameNull() {
                return this.IsNull(this.tableStudies.PatientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPatientNameNull() {
                this[this.tableStudies.PatientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPatientBirthDateNull() {
                return this.IsNull(this.tableStudies.PatientBirthDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPatientBirthDateNull() {
                this[this.tableStudies.PatientBirthDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPatientSexNull() {
                return this.IsNull(this.tableStudies.PatientSexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPatientSexNull() {
                this[this.tableStudies.PatientSexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStudyDescriptionNull() {
                return this.IsNull(this.tableStudies.StudyDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStudyDescriptionNull() {
                this[this.tableStudies.StudyDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStudyDateNull() {
                return this.IsNull(this.tableStudies.StudyDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStudyDateNull() {
                this[this.tableStudies.StudyDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccessionNumberNull() {
                return this.IsNull(this.tableStudies.AccessionNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccessionNumberNull() {
                this[this.tableStudies.AccessionNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReferDrNameNull() {
                return this.IsNull(this.tableStudies.ReferDrNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReferDrNameNull() {
                this[this.tableStudies.ReferDrNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SeriesRow : global::System.Data.DataRow {
            
            private SeriesDataTable tableSeries;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SeriesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSeries = ((SeriesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SeriesNumber {
                get {
                    try {
                        return ((string)(this[this.tableSeries.SeriesNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SeriesNumber\' in table \'Series\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSeries.SeriesNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SeriesDescription {
                get {
                    try {
                        return ((string)(this[this.tableSeries.SeriesDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SeriesDescription\' in table \'Series\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSeries.SeriesDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Modality {
                get {
                    try {
                        return ((string)(this[this.tableSeries.ModalityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Modality\' in table \'Series\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSeries.ModalityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SeriesDate {
                get {
                    try {
                        return ((string)(this[this.tableSeries.SeriesDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SeriesDate\' in table \'Series\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSeries.SeriesDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SeriesTime {
                get {
                    try {
                        return ((string)(this[this.tableSeries.SeriesTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SeriesTime\' in table \'Series\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSeries.SeriesTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FrameCount {
                get {
                    try {
                        return ((string)(this[this.tableSeries.FrameCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FrameCount\' in table \'Series\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSeries.FrameCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StudyInstanceUID {
                get {
                    try {
                        return ((string)(this[this.tableSeries.StudyInstanceUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StudyInstanceUID\' in table \'Series\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSeries.StudyInstanceUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SeriesInstanceUID {
                get {
                    return ((string)(this[this.tableSeries.SeriesInstanceUIDColumn]));
                }
                set {
                    this[this.tableSeries.SeriesInstanceUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeriesNumberNull() {
                return this.IsNull(this.tableSeries.SeriesNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeriesNumberNull() {
                this[this.tableSeries.SeriesNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeriesDescriptionNull() {
                return this.IsNull(this.tableSeries.SeriesDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeriesDescriptionNull() {
                this[this.tableSeries.SeriesDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModalityNull() {
                return this.IsNull(this.tableSeries.ModalityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModalityNull() {
                this[this.tableSeries.ModalityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeriesDateNull() {
                return this.IsNull(this.tableSeries.SeriesDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeriesDateNull() {
                this[this.tableSeries.SeriesDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeriesTimeNull() {
                return this.IsNull(this.tableSeries.SeriesTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeriesTimeNull() {
                this[this.tableSeries.SeriesTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrameCountNull() {
                return this.IsNull(this.tableSeries.FrameCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrameCountNull() {
                this[this.tableSeries.FrameCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStudyInstanceUIDNull() {
                return this.IsNull(this.tableSeries.StudyInstanceUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStudyInstanceUIDNull() {
                this[this.tableSeries.StudyInstanceUIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ImagesRow : global::System.Data.DataRow {
            
            private ImagesDataTable tableImages;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ImagesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableImages = ((ImagesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SOPInstanceUID {
                get {
                    return ((string)(this[this.tableImages.SOPInstanceUIDColumn]));
                }
                set {
                    this[this.tableImages.SOPInstanceUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InstanceNumber {
                get {
                    try {
                        return ((string)(this[this.tableImages.InstanceNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InstanceNumber\' in table \'Images\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableImages.InstanceNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StudyInstanceUID {
                get {
                    try {
                        return ((string)(this[this.tableImages.StudyInstanceUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StudyInstanceUID\' in table \'Images\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableImages.StudyInstanceUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SeriesInstanceUID {
                get {
                    try {
                        return ((string)(this[this.tableImages.SeriesInstanceUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SeriesInstanceUID\' in table \'Images\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableImages.SeriesInstanceUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SOPClassUID {
                get {
                    return ((string)(this[this.tableImages.SOPClassUIDColumn]));
                }
                set {
                    this[this.tableImages.SOPClassUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstanceNumberNull() {
                return this.IsNull(this.tableImages.InstanceNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstanceNumberNull() {
                this[this.tableImages.InstanceNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStudyInstanceUIDNull() {
                return this.IsNull(this.tableImages.StudyInstanceUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStudyInstanceUIDNull() {
                this[this.tableImages.StudyInstanceUIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeriesInstanceUIDNull() {
                return this.IsNull(this.tableImages.SeriesInstanceUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeriesInstanceUIDNull() {
                this[this.tableImages.SeriesInstanceUIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StudiesRowChangeEvent : global::System.EventArgs {
            
            private StudiesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudiesRowChangeEvent(StudiesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SeriesRowChangeEvent : global::System.EventArgs {
            
            private SeriesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SeriesRowChangeEvent(SeriesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SeriesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ImagesRowChangeEvent : global::System.EventArgs {
            
            private ImagesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagesRowChangeEvent(ImagesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591